
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000990  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000357  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018a  00000000  00000000  00001d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	8a c0       	rjmp	.+276    	; 0x11a <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	59 d0       	rcall	.+178    	; 0x176 <main>
  c4:	97 c0       	rjmp	.+302    	; 0x1f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <segment>:

void segment(int n)
{
	unsigned char n10, n1;
	n10 = n / 10;
	n1 = n % 10;
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	6c d0       	rcall	.+216    	; 0x1a6 <__divmodhi4>
  ce:	ac 01       	movw	r20, r24
	
	for (int i =0; i < 30; i++ )
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	1e c0       	rjmp	.+60     	; 0x112 <segment+0x4a>
	{
		PORTG = 0x0b;
  d6:	a5 e6       	ldi	r26, 0x65	; 101
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	8b e0       	ldi	r24, 0x0B	; 11
  dc:	8c 93       	st	X, r24
		PORTB = font[n10];
  de:	fb 01       	movw	r30, r22
  e0:	ff 27       	eor	r31, r31
  e2:	e0 50       	subi	r30, 0x00	; 0
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	90 81       	ld	r25, Z
  e8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	86 e6       	ldi	r24, 0x66	; 102
  ec:	9e e0       	ldi	r25, 0x0E	; 14
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <segment+0x26>
  f2:	00 00       	nop
		_delay_ms(1);
		PORTG = 0x07;
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	9c 93       	st	X, r25
		PORTB = font[n1];
  f8:	fa 01       	movw	r30, r20
  fa:	ff 27       	eor	r31, r31
  fc:	e0 50       	subi	r30, 0x00	; 0
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	90 81       	ld	r25, Z
 102:	98 bb       	out	0x18, r25	; 24
 104:	86 e6       	ldi	r24, 0x66	; 102
 106:	9e e0       	ldi	r25, 0x0E	; 14
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <segment+0x40>
 10c:	00 00       	nop
{
	unsigned char n10, n1;
	n10 = n / 10;
	n1 = n % 10;
	
	for (int i =0; i < 30; i++ )
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	2e 31       	cpi	r18, 0x1E	; 30
 114:	31 05       	cpc	r19, r1
 116:	fc f2       	brlt	.-66     	; 0xd6 <segment+0xe>
		_delay_ms(1);
		PORTG = 0x07;
		PORTB = font[n1];
		_delay_ms(1);
	}
}
 118:	08 95       	ret

0000011a <__vector_1>:
ISR(INT0_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	count++;
 128:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 12c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 136:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_5>:
ISR(INT4_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
	count--;
 156:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 15a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 164:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:

int main(void)
{
	DDRB = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0f;
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00;
 180:	11 ba       	out	0x11, r1	; 17
	
	EIMSK |= (1 << INT0) | (1<<INT4); //0x01; //INT0
 182:	89 b7       	in	r24, 0x39	; 57
 184:	81 61       	ori	r24, 0x11	; 17
 186:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC01) | (1 << ISC00);//0x03; //INT0 RISING EDGE
 188:	ea e6       	ldi	r30, 0x6A	; 106
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	80 83       	st	Z, r24
	EICRB |= (1<< ISC41) | (1<<ISC40);
 192:	8a b7       	in	r24, 0x3a	; 58
 194:	83 60       	ori	r24, 0x03	; 3
 196:	8a bf       	out	0x3a, r24	; 58
	
	
	sei();
 198:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		segment(count);
 19a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 19e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1a2:	92 df       	rcall	.-220    	; 0xc8 <segment>
 1a4:	fa cf       	rjmp	.-12     	; 0x19a <main+0x24>

000001a6 <__divmodhi4>:
 1a6:	97 fb       	bst	r25, 7
 1a8:	07 2e       	mov	r0, r23
 1aa:	16 f4       	brtc	.+4      	; 0x1b0 <__divmodhi4+0xa>
 1ac:	00 94       	com	r0
 1ae:	06 d0       	rcall	.+12     	; 0x1bc <__divmodhi4_neg1>
 1b0:	77 fd       	sbrc	r23, 7
 1b2:	08 d0       	rcall	.+16     	; 0x1c4 <__divmodhi4_neg2>
 1b4:	0b d0       	rcall	.+22     	; 0x1cc <__udivmodhi4>
 1b6:	07 fc       	sbrc	r0, 7
 1b8:	05 d0       	rcall	.+10     	; 0x1c4 <__divmodhi4_neg2>
 1ba:	3e f4       	brtc	.+14     	; 0x1ca <__divmodhi4_exit>

000001bc <__divmodhi4_neg1>:
 1bc:	90 95       	com	r25
 1be:	81 95       	neg	r24
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	08 95       	ret

000001c4 <__divmodhi4_neg2>:
 1c4:	70 95       	com	r23
 1c6:	61 95       	neg	r22
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ca <__divmodhi4_exit>:
 1ca:	08 95       	ret

000001cc <__udivmodhi4>:
 1cc:	aa 1b       	sub	r26, r26
 1ce:	bb 1b       	sub	r27, r27
 1d0:	51 e1       	ldi	r21, 0x11	; 17
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <__udivmodhi4_ep>

000001d4 <__udivmodhi4_loop>:
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	a6 17       	cp	r26, r22
 1da:	b7 07       	cpc	r27, r23
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <__udivmodhi4_ep>
 1de:	a6 1b       	sub	r26, r22
 1e0:	b7 0b       	sbc	r27, r23

000001e2 <__udivmodhi4_ep>:
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	5a 95       	dec	r21
 1e8:	a9 f7       	brne	.-22     	; 0x1d4 <__udivmodhi4_loop>
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
